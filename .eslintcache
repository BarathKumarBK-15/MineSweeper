[{"/home/barathkumar/Documents/ReactJS/minesweeper/src/index.js":"1","/home/barathkumar/Documents/ReactJS/minesweeper/src/App.js":"2","/home/barathkumar/Documents/ReactJS/minesweeper/src/reportWebVitals.js":"3","/home/barathkumar/Documents/ReactJS/minesweeper/src/Minesweeper/Minesweeper.jsx":"4"},{"size":500,"mtime":1607767108458,"results":"5","hashOfConfig":"6"},{"size":259,"mtime":1610388202513,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1607767108458,"results":"8","hashOfConfig":"6"},{"size":5693,"mtime":1610388199074,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"rj1rf5",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"/home/barathkumar/Documents/ReactJS/minesweeper/src/index.js",[],["20","21"],"/home/barathkumar/Documents/ReactJS/minesweeper/src/App.js",["22"],"/home/barathkumar/Documents/ReactJS/minesweeper/src/reportWebVitals.js",[],"/home/barathkumar/Documents/ReactJS/minesweeper/src/Minesweeper/Minesweeper.jsx",["23"],"import React from 'react';\nimport './Minesweeper.css';\n\nexport default class Minesweeper extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state={array:[],tiles:[],score:[]};\n    }\n\n    componentDidMount() \n    {\n        this.resetMines();\n    }\n\n    resetMines()\n    {\n        const array=[];\n        const tiles=[];\n        const score=[];\n        score.push(0);\n        for(let i=0;i<100;i++)\n        {\n            tiles.push('TRY ME:)');\n        }\n        var i=20;\n        while(i>0)\n        {\n            var x=randomin(0,99);\n            var flag=0;\n            for(let i=0;i<array.length;i++)\n            {\n                if(array[i]===x)\n                {\n                    flag=1;\n                    break;\n                }\n            }\n            if(flag===0)\n            {\n                i--;\n                array.push(x);\n            }\n        }\n        console.log(array);\n        this.setState({array,tiles,score});\n    }\n\n    process(idx)\n    {\n        const {array,tiles,score}=this.state;\n        var flag=checkmine(array,idx);\n        if(flag===1)\n        {\n            const t=document.getElementsByClassName('mine');\n            const st=t[idx];\n            st.innerHTML='BOMB!';\n            st.style.margin='2px';\n            st.style.background='red';\n            st.style.borderRadius='15px';\n            const c=document.getElementById('GameOver');\n            c.style.display='block';\n            const con=document.getElementById('Game');\n            con.style.display='none';\n        }\n        else\n        {\n            score[0]+=1;\n            if(score[0]===80)\n            {\n                const w=document.getElementById('Winner');\n                w.style.display='block';\n                const con=document.getElementById('Game');\n                con.style.display='none';\n            }\n            this.setState({array,tiles,score});\n            const t=document.getElementsByClassName('mine');\n            const st=t[idx];\n            var x=Math.floor(idx/10);\n            var y=idx%10;\n            var x1=x-1;\n            var y1=y-1;\n            var x2=x-1;\n            var y2=y;\n            var x3=x-1;\n            var y3=y+1;\n            var x4=x;\n            var y4=y+1;\n            var x5=x+1;\n            var y5=y+1;\n            var x6=x+1;\n            var y6=y;\n            var x7=x+1;\n            var y7=y-1;\n            var x8=x;\n            var y8=y-1;\n            var count=0;\n            if(validate(x1,y1)===1)\n            {\n                console.log(x1+' '+y1);\n                count+=checkmine(array,x1*10+y1);\n            }\n            if(validate(x2,y2)===1)\n            {\n                console.log(x2+' '+y2);\n                count+=checkmine(array,x2*10+y2);\n            }\n            if(validate(x3,y3)===1)\n            {\n                console.log(x3+' '+y3);\n                count+=checkmine(array,x3*10+y3);\n            }\n            if(validate(x4,y4)===1)\n            {\n                console.log(x4+' '+y4);\n                count+=checkmine(array,x4*10+y4);\n            }\n            if(validate(x5,y5)===1)\n            {\n                console.log(x5+' '+y5);\n                count+=checkmine(array,x5*10+y5);\n            }\n            if(validate(x6,y6)===1)\n            {\n                console.log(x6+' '+y6);\n                count+=checkmine(array,x6*10+y6);\n            }\n            if(validate(x7,y7)===1)\n            {\n                console.log(x7+' '+y7);\n                count+=checkmine(array,x7*10+y7);\n            }\n            if(validate(x8,y8)===1)\n            {\n                console.log(x8+' '+y8);\n                count+=checkmine(array,x8*10+y8);\n            }\n            st.innerHTML=count;\n            st.style.margin='2px';\n            st.style.background='green';\n            st.style.borderRadius='15px';\n        }\n    }\n\n    render() \n    {\n        const {array,tiles,score}=this.state;\n        return(\n            <div className=\"mine-container\">\n                <div id=\"GameOver\">\n                <br></br>\n                <br></br>\n                <br></br>\n                {'OOPS:( GAME OVER'}\n                <br></br>\n                <br></br>\n                <br></br>\n                Score : {score[0]}\n                <br></br>\n                <br></br>\n                <br></br>\n                <button id=\"newgame\" onClick={()=>NG()}>NEW GAME</button>\n                <br></br></div>\n                <div id=\"Winner\">\n                <br></br>\n                <br></br>\n                <br></br>\n                {'CONGRATS:) YOU HAVE WON THE GAME!!'}\n                <br></br>\n                <br></br>\n                <br></br>\n                Score : 80\n                <br></br>\n                <br></br>\n                <br></br>\n                <button id=\"newgame\" onClick={()=>NG()}>NEW GAME</button>\n                <br></br></div>\n                <div id=\"Game\">\n                {tiles.map((value,idx)=>(\n                <button className=\"mine\" key={idx} onClick={()=>this.process(idx)}>{value}\n                </button>))}\n                <br></br>\n                <br></br>\n                <div id=\"Score\">Score : {score[0]}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction validate(x,y)\n{\n    if(x<0||x>9)\n    {\n        return 0;\n    }\n    if(y<0||y>9)\n    {\n        return 0;\n    }\n    return 1;\n}\n\nfunction randomin(min,max)\n{\n    return Math.floor(Math.random()*(max-min+1)+min);\n}\n\nfunction checkmine(arr,i)\n{\n    for(let j=0;j<arr.length;j++)\n    {\n        if(arr[j]===i)\n        {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nfunction NG()\n{\n    window.location.reload();\n}",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":1,"column":8,"nodeType":"30","messageId":"31","endLine":1,"endColumn":12},{"ruleId":"28","severity":1,"message":"32","line":148,"column":16,"nodeType":"30","messageId":"31","endLine":148,"endColumn":21},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'array' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]